$spinWhileLoading: false !default;
$spinWhileWaiting: false !default;
$overlayWhileLoading: false !default;
$zoomThumbOnHover: false !default;
$zoomOutWhileLoading: false !default;

$productThumbSize: 75px !default;

%cx-product-images {
  display: flex;
  flex-direction: var(--cx-flex-direction, column);

  height: 100%;
  > cx-media {
    height: 100%;
    width: 100%; // required to support horizontal layouts
    position: relative;
  }

  cx-media {
    &.is-missing {
      min-height: 30vh;
    }

    @if $zoomOutWhileLoading == true {
      &.is-initialized.is-loading {
        --cx-zoom: 0.5;
      }
    }

    @if $spinWhileLoading == true OR $spinWhileWaiting == true {
      &:after {
        @extend %spinner !optional;
      }
      &:not(.is-loading):after {
        animation-play-state: paused;
      }
    }

    // the effects run always, but are made visible only when loading or waiting
    // this is done so we can slowly fadein/out the effect
    @if $spinWhileLoading == true {
      &.is-loading:after {
        --cx-opacity: 1;
      }
    }
    @if $spinWhileWaiting == true {
      &.is-waiting:after {
        --cx-opacity: 1;
      }
    }
  }

  .thumbs {
    display: flex;
    &.hidden {
      display: none;
    }
    justify-content: flex-start;

    cx-media {
      width: $productThumbSize;
      height: $productThumbSize;

      &.is-missing {
        min-height: $productThumbSize;
        background-size: $productThumbSize;
      }

      transition: all var(--cx-g-transition-duration);

      &:not(.active) {
        cursor: pointer;
      }
      overflow: hidden;
      position: relative;

      border: var(--cx-border, 2px solid var(--cx-g-color-light));

      margin: var(--cx-margin, 0.5vw);
      padding: var(--cx-padding, 0.5vw);

      &:hover,
      &.active {
        border-color: var(--cx-border-color, var(--cx-g-color-primary));
      }
      outline: none;

      @if $zoomThumbOnHover == true {
        &:hover:not(.active) {
          --cx-zoom: 1.3;
        }
      }

      @if $overlayWhileLoading == true {
        &.is-initialized:before {
          @extend %overlay !optional;
        }
        // the effects run always, but are made visible only when loading or waiting
        // this is done so we can slowly fadein/out the effect
        &.is-loading:before,
        &.is-waiting:before {
          --cx-opacity: 1;
        }
      }
    }
  }
}
